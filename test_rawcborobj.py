import unittest
import time
from rawcborobj import rawcborobj

class TestRawCBORObj(unittest.TestCase):

    def test_simple_arrays1(self):
        c = rawcborobj(bytes.fromhex("84030405820119ffff"))
        self.assertEqual(c[0].value, 3)
        self.assertEqual(c[1].value, 4)
        self.assertEqual(c[2].value, 5)
        self.assertEqual(str(c[0]), "3")
        self.assertEqual(str(c[1]), "4")
        self.assertEqual(str(c[2]), "5")
        self.assertEqual(len(c[3]), 2)
        self.assertEqual(c[3][0].value, 1)
        self.assertEqual(c[3][1].value, 65535)

    def test_indefinite_array(self):
        c = rawcborobj(bytes.fromhex("9f01020304050607ff"))
        self.assertEqual(len(c), 7)
        self.assertEqual(c[3].value, 4)

    def test_simple_map(self):
        c = rawcborobj(bytes.fromhex("a201080209"))
        self.assertEqual(c[1].value, 8)
        self.assertEqual(c[2].value, 9)

    def test_nested_stuff1(self):
        encoded_str = "9fa19f10ff00a19f10ff01ff"
        c = rawcborobj(bytes.fromhex(encoded_str))
        self.assertEqual(c.encoded(), encoded_str)
        self.assertEqual(c[0].encoded(), "a19f10ff00")
        self.assertEqual(c[0].keys_encoded(), ['9f10ff'])

    def test_nested_stuff2(self):
        encoded_str = "a3820304070507a20102020501"
        c = rawcborobj(bytes.fromhex(encoded_str))
        self.assertEqual(c.keys_encoded(), ['820304', '05', 'a201020205'])

        self.assertEqual(c[rawcborobj(bytes.fromhex('820304'))].value, 7)
        self.assertEqual(c[rawcborobj(bytes.fromhex('05'))].value, 7)
        self.assertEqual(c[5].value, 7)
        self.assertEqual(c[rawcborobj(bytes.fromhex('a201020205'))].value, 1)

    def test_nested_stuff3(self):
        c = rawcborobj(bytes.fromhex("9fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0dbba000ffffffffd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0f731400ffffffffff"))

        self.assertEqual(len(c), 2)
        self.assertEqual(c[0].tag, 121)

        self.assertEqual(c[0][0].value.hex(), '7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7')

        self.assertEqual(c[0][0].tag, None)

        self.assertTrue(c[0][1].encoded().startswith('9f'))

        self.assertEqual(c[0][1][0][1].keys_encoded(), ['40'])
        self.assertEqual(c[0][1][0][1]['40'][1]['40'].value, 4800000)
        self.assertEqual(c[0][1][0][1]['40'].tag, 121)
        self.assertEqual(c[0][1][0][1]['40'][1].tag, None)
        self.assertEqual(c[0][1][0][1]['40'][1]['40'].tag, None)

        self.assertEqual(c[0][1][0][1][b'@'][1][bytes.fromhex('40')].value, 4800000)

    def test_raw_tx(self):
        raw_bytes = bytes.fromhex("84ab00828258209faa7b31a7f47fda01f907c579f1c2fb3812969089c81ff92fc433d108438eea048258201c634f0c203fba5716cdf78a3d8673944fb76b2b7ecc9c2b3b9048e5c985dd43020183835839119068a7a3f008803edac87af1619860f2cdcde40c26987325ace138ad81728e7ed4cf324e1323135e7e6d931f01e30792d9cdf17129cb806d821a0013991ca1581cf0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9aa14436343233015820953c26461c9422cb80c9dcfb6bd57622630b222e9b757cd1628fde3105c34c17825839017b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4c1a07270e00825839017b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4c1a07221d78021a0004f088031a051199860758200cdc253a211c4a6cf6d428562b6c708ff7d3c8b5a9c63161e84e4771d6a191ea0b5820fca1526944b39461d80348e553c667b3fefbcf9d4ddb410e1d3f818cdb2fe6630d8182582060ae0bc83d557c3f0c5fc48f81edbc257be494ef9279693285c0c2b4b97b2514000e81581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f710825839017b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4c1a0044e274111a000768cc12818258209a32459bd4ef6bbafdeb8cf3b909d0e3e2ec806e4cc6268529280b0fc1d06f5b00a3008182582006bcbf19c904cb7053226c030034e44cad1e354c8c7ff68e6a3cd836658e0f52584098368f7f21573e60f96f5c3dded511cfe3eda741b7bce1556780732c77b5e52e7559d0facb8ba7fd22b1849ac09b1a8c902d44e0c7f5fab9dc0826fd7d86800f049fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0dbba000ffffffffd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0f731400ffffffffff0581840001d87980821a000e328c1a123ff92ff5ac181ea784061393534306564366637343666303965343662393635373766376666643837393966643837393966643837393966353831633137383330356330626431323338183b784035356464343433333131326436303831653339303664323565386236316138353734656264616665346366666666666666666131343064383739396630306131183c7534303161306462626130303066666666666666662c")
        c = rawcborobj(raw_bytes)
        self.assertTrue(c[1][4][0].encoded().startswith("d8799f581c7b6659ee4ed7b34"))


    def test_tupleindex(self):
        c = rawcborobj(bytes.fromhex("9fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a00493e00ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0dbba000ffffffffd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f79fd8799fd8799fd8799f581c3342ca8c073a11b7664bd105123353e79c01116cc465915133fdcf75ffd8799fd8799fd8799f581cd6c5f6f7562142b9815eacc31a3a1579991452e860aaf60573722018ffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c70e60f3b5ea7153e0acc7a803e4401d44b8ed1bae1c7baaad1a62a72ffd8799fd8799fd8799f581c1e78aae7c90cc36d624f7b3bb6d86b52696dc84e490f343eba89005fffffffffa140d8799f00a1401a005265c0ffffd8799fd8799fd8799f581c7b6659ee4ed7b34fb82f3cee8e1c30a9540ed6f746f09e46b96577f7ffd8799fd8799fd8799f581c178305c0bd123855dd4433112d6081e3906d25e8b61a8574ebdafe4cffffffffa140d8799f00a1401a0f731400ffffffffff"))

        self.assertEqual(c[0][1][0][1]['40'].encoded(), c[0,1,0,1,b'@'].encoded())


